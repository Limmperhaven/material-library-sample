// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package tplibrary

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Material is an object representing the database table.
type Material struct {
	ID                 int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title              string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	SubjectID          int64       `boil:"subject_id" json:"subject_id" toml:"subject_id" yaml:"subject_id"`
	DifficultcyLevelID int64       `boil:"difficultcy_level_id" json:"difficultcy_level_id" toml:"difficultcy_level_id" yaml:"difficultcy_level_id"`
	TypeID             int64       `boil:"type_id" json:"type_id" toml:"type_id" yaml:"type_id"`
	StorageKey         null.String `boil:"storage_key" json:"storage_key,omitempty" toml:"storage_key" yaml:"storage_key,omitempty"`
	URL                string      `boil:"url" json:"url" toml:"url" yaml:"url"`
	ChecksumSha256     null.Bytes  `boil:"checksum_sha256" json:"checksum_sha256,omitempty" toml:"checksum_sha256" yaml:"checksum_sha256,omitempty"`
	Size               null.Int64  `boil:"size" json:"size,omitempty" toml:"size" yaml:"size,omitempty"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt          time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt          null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *materialR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L materialL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MaterialColumns = struct {
	ID                 string
	Title              string
	SubjectID          string
	DifficultcyLevelID string
	TypeID             string
	StorageKey         string
	URL                string
	ChecksumSha256     string
	Size               string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "id",
	Title:              "title",
	SubjectID:          "subject_id",
	DifficultcyLevelID: "difficultcy_level_id",
	TypeID:             "type_id",
	StorageKey:         "storage_key",
	URL:                "url",
	ChecksumSha256:     "checksum_sha256",
	Size:               "size",
	CreatedAt:          "created_at",
	UpdatedAt:          "updated_at",
	DeletedAt:          "deleted_at",
}

var MaterialTableColumns = struct {
	ID                 string
	Title              string
	SubjectID          string
	DifficultcyLevelID string
	TypeID             string
	StorageKey         string
	URL                string
	ChecksumSha256     string
	Size               string
	CreatedAt          string
	UpdatedAt          string
	DeletedAt          string
}{
	ID:                 "materials.id",
	Title:              "materials.title",
	SubjectID:          "materials.subject_id",
	DifficultcyLevelID: "materials.difficultcy_level_id",
	TypeID:             "materials.type_id",
	StorageKey:         "materials.storage_key",
	URL:                "materials.url",
	ChecksumSha256:     "materials.checksum_sha256",
	Size:               "materials.size",
	CreatedAt:          "materials.created_at",
	UpdatedAt:          "materials.updated_at",
	DeletedAt:          "materials.deleted_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MaterialWhere = struct {
	ID                 whereHelperint64
	Title              whereHelperstring
	SubjectID          whereHelperint64
	DifficultcyLevelID whereHelperint64
	TypeID             whereHelperint64
	StorageKey         whereHelpernull_String
	URL                whereHelperstring
	ChecksumSha256     whereHelpernull_Bytes
	Size               whereHelpernull_Int64
	CreatedAt          whereHelpertime_Time
	UpdatedAt          whereHelpertime_Time
	DeletedAt          whereHelpernull_Time
}{
	ID:                 whereHelperint64{field: "\"materials\".\"id\""},
	Title:              whereHelperstring{field: "\"materials\".\"title\""},
	SubjectID:          whereHelperint64{field: "\"materials\".\"subject_id\""},
	DifficultcyLevelID: whereHelperint64{field: "\"materials\".\"difficultcy_level_id\""},
	TypeID:             whereHelperint64{field: "\"materials\".\"type_id\""},
	StorageKey:         whereHelpernull_String{field: "\"materials\".\"storage_key\""},
	URL:                whereHelperstring{field: "\"materials\".\"url\""},
	ChecksumSha256:     whereHelpernull_Bytes{field: "\"materials\".\"checksum_sha256\""},
	Size:               whereHelpernull_Int64{field: "\"materials\".\"size\""},
	CreatedAt:          whereHelpertime_Time{field: "\"materials\".\"created_at\""},
	UpdatedAt:          whereHelpertime_Time{field: "\"materials\".\"updated_at\""},
	DeletedAt:          whereHelpernull_Time{field: "\"materials\".\"deleted_at\""},
}

// MaterialRels is where relationship names are stored.
var MaterialRels = struct {
	Type string
}{
	Type: "Type",
}

// materialR is where relationships are stored.
type materialR struct {
	Type *MaterialType `boil:"Type" json:"Type" toml:"Type" yaml:"Type"`
}

// NewStruct creates a new relationship struct
func (*materialR) NewStruct() *materialR {
	return &materialR{}
}

func (r *materialR) GetType() *MaterialType {
	if r == nil {
		return nil
	}
	return r.Type
}

// materialL is where Load methods for each relationship are stored.
type materialL struct{}

var (
	materialAllColumns            = []string{"id", "title", "subject_id", "difficultcy_level_id", "type_id", "storage_key", "url", "checksum_sha256", "size", "created_at", "updated_at", "deleted_at"}
	materialColumnsWithoutDefault = []string{"title", "subject_id", "difficultcy_level_id", "type_id", "url"}
	materialColumnsWithDefault    = []string{"id", "storage_key", "checksum_sha256", "size", "created_at", "updated_at", "deleted_at"}
	materialPrimaryKeyColumns     = []string{"id"}
	materialGeneratedColumns      = []string{}
)

type (
	// MaterialSlice is an alias for a slice of pointers to Material.
	// This should almost always be used instead of []Material.
	MaterialSlice []*Material
	// MaterialHook is the signature for custom Material hook methods
	MaterialHook func(context.Context, boil.ContextExecutor, *Material) error

	materialQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	materialType                 = reflect.TypeOf(&Material{})
	materialMapping              = queries.MakeStructMapping(materialType)
	materialPrimaryKeyMapping, _ = queries.BindMapping(materialType, materialMapping, materialPrimaryKeyColumns)
	materialInsertCacheMut       sync.RWMutex
	materialInsertCache          = make(map[string]insertCache)
	materialUpdateCacheMut       sync.RWMutex
	materialUpdateCache          = make(map[string]updateCache)
	materialUpsertCacheMut       sync.RWMutex
	materialUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var materialAfterSelectHooks []MaterialHook

var materialBeforeInsertHooks []MaterialHook
var materialAfterInsertHooks []MaterialHook

var materialBeforeUpdateHooks []MaterialHook
var materialAfterUpdateHooks []MaterialHook

var materialBeforeDeleteHooks []MaterialHook
var materialAfterDeleteHooks []MaterialHook

var materialBeforeUpsertHooks []MaterialHook
var materialAfterUpsertHooks []MaterialHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Material) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Material) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Material) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Material) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Material) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Material) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Material) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Material) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Material) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMaterialHook registers your hook function for all future operations.
func AddMaterialHook(hookPoint boil.HookPoint, materialHook MaterialHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		materialAfterSelectHooks = append(materialAfterSelectHooks, materialHook)
	case boil.BeforeInsertHook:
		materialBeforeInsertHooks = append(materialBeforeInsertHooks, materialHook)
	case boil.AfterInsertHook:
		materialAfterInsertHooks = append(materialAfterInsertHooks, materialHook)
	case boil.BeforeUpdateHook:
		materialBeforeUpdateHooks = append(materialBeforeUpdateHooks, materialHook)
	case boil.AfterUpdateHook:
		materialAfterUpdateHooks = append(materialAfterUpdateHooks, materialHook)
	case boil.BeforeDeleteHook:
		materialBeforeDeleteHooks = append(materialBeforeDeleteHooks, materialHook)
	case boil.AfterDeleteHook:
		materialAfterDeleteHooks = append(materialAfterDeleteHooks, materialHook)
	case boil.BeforeUpsertHook:
		materialBeforeUpsertHooks = append(materialBeforeUpsertHooks, materialHook)
	case boil.AfterUpsertHook:
		materialAfterUpsertHooks = append(materialAfterUpsertHooks, materialHook)
	}
}

// One returns a single material record from the query.
func (q materialQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Material, error) {
	o := &Material{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tplibrary: failed to execute a one query for materials")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Material records from the query.
func (q materialQuery) All(ctx context.Context, exec boil.ContextExecutor) (MaterialSlice, error) {
	var o []*Material

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "tplibrary: failed to assign all query results to Material slice")
	}

	if len(materialAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Material records in the query.
func (q materialQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: failed to count materials rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q materialQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "tplibrary: failed to check if materials exists")
	}

	return count > 0, nil
}

// Type pointed to by the foreign key.
func (o *Material) Type(mods ...qm.QueryMod) materialTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TypeID),
	}

	queryMods = append(queryMods, mods...)

	return MaterialTypes(queryMods...)
}

// LoadType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (materialL) LoadType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMaterial interface{}, mods queries.Applicator) error {
	var slice []*Material
	var object *Material

	if singular {
		object = maybeMaterial.(*Material)
	} else {
		slice = *maybeMaterial.(*[]*Material)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &materialR{}
		}
		args = append(args, object.TypeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &materialR{}
			}

			for _, a := range args {
				if a == obj.TypeID {
					continue Outer
				}
			}

			args = append(args, obj.TypeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`material_types`),
		qm.WhereIn(`material_types.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MaterialType")
	}

	var resultSlice []*MaterialType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MaterialType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for material_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for material_types")
	}

	if len(materialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Type = foreign
		if foreign.R == nil {
			foreign.R = &materialTypeR{}
		}
		foreign.R.TypeMaterials = append(foreign.R.TypeMaterials, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TypeID == foreign.ID {
				local.R.Type = foreign
				if foreign.R == nil {
					foreign.R = &materialTypeR{}
				}
				foreign.R.TypeMaterials = append(foreign.R.TypeMaterials, local)
				break
			}
		}
	}

	return nil
}

// SetType of the material to the related item.
// Sets o.R.Type to related.
// Adds o to related.R.TypeMaterials.
func (o *Material) SetType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MaterialType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"materials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"type_id"}),
		strmangle.WhereClause("\"", "\"", 2, materialPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TypeID = related.ID
	if o.R == nil {
		o.R = &materialR{
			Type: related,
		}
	} else {
		o.R.Type = related
	}

	if related.R == nil {
		related.R = &materialTypeR{
			TypeMaterials: MaterialSlice{o},
		}
	} else {
		related.R.TypeMaterials = append(related.R.TypeMaterials, o)
	}

	return nil
}

// Materials retrieves all the records using an executor.
func Materials(mods ...qm.QueryMod) materialQuery {
	mods = append(mods, qm.From("\"materials\""), qmhelper.WhereIsNull("\"materials\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"materials\".*"})
	}

	return materialQuery{q}
}

// FindMaterial retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMaterial(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Material, error) {
	materialObj := &Material{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"materials\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, materialObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tplibrary: unable to select from materials")
	}

	if err = materialObj.doAfterSelectHooks(ctx, exec); err != nil {
		return materialObj, err
	}

	return materialObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Material) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("tplibrary: no materials provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(materialColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	materialInsertCacheMut.RLock()
	cache, cached := materialInsertCache[key]
	materialInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			materialAllColumns,
			materialColumnsWithDefault,
			materialColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(materialType, materialMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(materialType, materialMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"materials\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"materials\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "tplibrary: unable to insert into materials")
	}

	if !cached {
		materialInsertCacheMut.Lock()
		materialInsertCache[key] = cache
		materialInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Material.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Material) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	materialUpdateCacheMut.RLock()
	cache, cached := materialUpdateCache[key]
	materialUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			materialAllColumns,
			materialPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("tplibrary: unable to update materials, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"materials\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, materialPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(materialType, materialMapping, append(wl, materialPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to update materials row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: failed to get rows affected by update for materials")
	}

	if !cached {
		materialUpdateCacheMut.Lock()
		materialUpdateCache[key] = cache
		materialUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q materialQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to update all for materials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to retrieve rows affected for materials")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MaterialSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("tplibrary: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), materialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"materials\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, materialPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to update all in material slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to retrieve rows affected all in update all material")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Material) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("tplibrary: no materials provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(materialColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	materialUpsertCacheMut.RLock()
	cache, cached := materialUpsertCache[key]
	materialUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			materialAllColumns,
			materialColumnsWithDefault,
			materialColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			materialAllColumns,
			materialPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("tplibrary: unable to upsert materials, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(materialPrimaryKeyColumns))
			copy(conflict, materialPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"materials\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(materialType, materialMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(materialType, materialMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "tplibrary: unable to upsert materials")
	}

	if !cached {
		materialUpsertCacheMut.Lock()
		materialUpsertCache[key] = cache
		materialUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Material record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Material) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("tplibrary: no Material provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), materialPrimaryKeyMapping)
		sql = "DELETE FROM \"materials\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"materials\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(materialType, materialMapping, append(wl, materialPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to delete from materials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: failed to get rows affected by delete for materials")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q materialQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("tplibrary: no materialQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to delete all from materials")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: failed to get rows affected by deleteall for materials")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MaterialSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(materialBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), materialPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"materials\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, materialPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), materialPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"materials\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, materialPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to delete all from material slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: failed to get rows affected by deleteall for materials")
	}

	if len(materialAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Material) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMaterial(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MaterialSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MaterialSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), materialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"materials\".* FROM \"materials\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, materialPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "tplibrary: unable to reload all in MaterialSlice")
	}

	*o = slice

	return nil
}

// MaterialExists checks if the Material row exists.
func MaterialExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"materials\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "tplibrary: unable to check if materials exists")
	}

	return exists, nil
}
