// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package tplibrary

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MaterialType is an object representing the database table.
type MaterialType struct {
	ID       int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     string `boil:"name" json:"name" toml:"name" yaml:"name"`
	ImageURL string `boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`

	R *materialTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L materialTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MaterialTypeColumns = struct {
	ID       string
	Name     string
	ImageURL string
}{
	ID:       "id",
	Name:     "name",
	ImageURL: "image_url",
}

var MaterialTypeTableColumns = struct {
	ID       string
	Name     string
	ImageURL string
}{
	ID:       "material_types.id",
	Name:     "material_types.name",
	ImageURL: "material_types.image_url",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var MaterialTypeWhere = struct {
	ID       whereHelperint64
	Name     whereHelperstring
	ImageURL whereHelperstring
}{
	ID:       whereHelperint64{field: "\"material_types\".\"id\""},
	Name:     whereHelperstring{field: "\"material_types\".\"name\""},
	ImageURL: whereHelperstring{field: "\"material_types\".\"image_url\""},
}

// MaterialTypeRels is where relationship names are stored.
var MaterialTypeRels = struct {
	TypeMaterials string
}{
	TypeMaterials: "TypeMaterials",
}

// materialTypeR is where relationships are stored.
type materialTypeR struct {
	TypeMaterials MaterialSlice `boil:"TypeMaterials" json:"TypeMaterials" toml:"TypeMaterials" yaml:"TypeMaterials"`
}

// NewStruct creates a new relationship struct
func (*materialTypeR) NewStruct() *materialTypeR {
	return &materialTypeR{}
}

func (r *materialTypeR) GetTypeMaterials() MaterialSlice {
	if r == nil {
		return nil
	}
	return r.TypeMaterials
}

// materialTypeL is where Load methods for each relationship are stored.
type materialTypeL struct{}

var (
	materialTypeAllColumns            = []string{"id", "name", "image_url"}
	materialTypeColumnsWithoutDefault = []string{"name"}
	materialTypeColumnsWithDefault    = []string{"id", "image_url"}
	materialTypePrimaryKeyColumns     = []string{"id"}
	materialTypeGeneratedColumns      = []string{}
)

type (
	// MaterialTypeSlice is an alias for a slice of pointers to MaterialType.
	// This should almost always be used instead of []MaterialType.
	MaterialTypeSlice []*MaterialType
	// MaterialTypeHook is the signature for custom MaterialType hook methods
	MaterialTypeHook func(context.Context, boil.ContextExecutor, *MaterialType) error

	materialTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	materialTypeType                 = reflect.TypeOf(&MaterialType{})
	materialTypeMapping              = queries.MakeStructMapping(materialTypeType)
	materialTypePrimaryKeyMapping, _ = queries.BindMapping(materialTypeType, materialTypeMapping, materialTypePrimaryKeyColumns)
	materialTypeInsertCacheMut       sync.RWMutex
	materialTypeInsertCache          = make(map[string]insertCache)
	materialTypeUpdateCacheMut       sync.RWMutex
	materialTypeUpdateCache          = make(map[string]updateCache)
	materialTypeUpsertCacheMut       sync.RWMutex
	materialTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var materialTypeAfterSelectHooks []MaterialTypeHook

var materialTypeBeforeInsertHooks []MaterialTypeHook
var materialTypeAfterInsertHooks []MaterialTypeHook

var materialTypeBeforeUpdateHooks []MaterialTypeHook
var materialTypeAfterUpdateHooks []MaterialTypeHook

var materialTypeBeforeDeleteHooks []MaterialTypeHook
var materialTypeAfterDeleteHooks []MaterialTypeHook

var materialTypeBeforeUpsertHooks []MaterialTypeHook
var materialTypeAfterUpsertHooks []MaterialTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MaterialType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MaterialType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MaterialType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MaterialType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MaterialType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MaterialType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MaterialType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MaterialType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MaterialType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range materialTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMaterialTypeHook registers your hook function for all future operations.
func AddMaterialTypeHook(hookPoint boil.HookPoint, materialTypeHook MaterialTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		materialTypeAfterSelectHooks = append(materialTypeAfterSelectHooks, materialTypeHook)
	case boil.BeforeInsertHook:
		materialTypeBeforeInsertHooks = append(materialTypeBeforeInsertHooks, materialTypeHook)
	case boil.AfterInsertHook:
		materialTypeAfterInsertHooks = append(materialTypeAfterInsertHooks, materialTypeHook)
	case boil.BeforeUpdateHook:
		materialTypeBeforeUpdateHooks = append(materialTypeBeforeUpdateHooks, materialTypeHook)
	case boil.AfterUpdateHook:
		materialTypeAfterUpdateHooks = append(materialTypeAfterUpdateHooks, materialTypeHook)
	case boil.BeforeDeleteHook:
		materialTypeBeforeDeleteHooks = append(materialTypeBeforeDeleteHooks, materialTypeHook)
	case boil.AfterDeleteHook:
		materialTypeAfterDeleteHooks = append(materialTypeAfterDeleteHooks, materialTypeHook)
	case boil.BeforeUpsertHook:
		materialTypeBeforeUpsertHooks = append(materialTypeBeforeUpsertHooks, materialTypeHook)
	case boil.AfterUpsertHook:
		materialTypeAfterUpsertHooks = append(materialTypeAfterUpsertHooks, materialTypeHook)
	}
}

// One returns a single materialType record from the query.
func (q materialTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MaterialType, error) {
	o := &MaterialType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tplibrary: failed to execute a one query for material_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MaterialType records from the query.
func (q materialTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (MaterialTypeSlice, error) {
	var o []*MaterialType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "tplibrary: failed to assign all query results to MaterialType slice")
	}

	if len(materialTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MaterialType records in the query.
func (q materialTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: failed to count material_types rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q materialTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "tplibrary: failed to check if material_types exists")
	}

	return count > 0, nil
}

// TypeMaterials retrieves all the material's Materials with an executor via type_id column.
func (o *MaterialType) TypeMaterials(mods ...qm.QueryMod) materialQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"materials\".\"type_id\"=?", o.ID),
	)

	return Materials(queryMods...)
}

// LoadTypeMaterials allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (materialTypeL) LoadTypeMaterials(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMaterialType interface{}, mods queries.Applicator) error {
	var slice []*MaterialType
	var object *MaterialType

	if singular {
		object = maybeMaterialType.(*MaterialType)
	} else {
		slice = *maybeMaterialType.(*[]*MaterialType)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &materialTypeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &materialTypeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`materials`),
		qm.WhereIn(`materials.type_id in ?`, args...),
		qmhelper.WhereIsNull(`materials.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load materials")
	}

	var resultSlice []*Material
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice materials")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on materials")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for materials")
	}

	if len(materialAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TypeMaterials = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &materialR{}
			}
			foreign.R.Type = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TypeID {
				local.R.TypeMaterials = append(local.R.TypeMaterials, foreign)
				if foreign.R == nil {
					foreign.R = &materialR{}
				}
				foreign.R.Type = local
				break
			}
		}
	}

	return nil
}

// AddTypeMaterials adds the given related objects to the existing relationships
// of the material_type, optionally inserting them as new records.
// Appends related to o.R.TypeMaterials.
// Sets related.R.Type appropriately.
func (o *MaterialType) AddTypeMaterials(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Material) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TypeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"materials\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"type_id"}),
				strmangle.WhereClause("\"", "\"", 2, materialPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TypeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &materialTypeR{
			TypeMaterials: related,
		}
	} else {
		o.R.TypeMaterials = append(o.R.TypeMaterials, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &materialR{
				Type: o,
			}
		} else {
			rel.R.Type = o
		}
	}
	return nil
}

// MaterialTypes retrieves all the records using an executor.
func MaterialTypes(mods ...qm.QueryMod) materialTypeQuery {
	mods = append(mods, qm.From("\"material_types\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"material_types\".*"})
	}

	return materialTypeQuery{q}
}

// FindMaterialType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMaterialType(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*MaterialType, error) {
	materialTypeObj := &MaterialType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"material_types\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, materialTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "tplibrary: unable to select from material_types")
	}

	if err = materialTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return materialTypeObj, err
	}

	return materialTypeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MaterialType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("tplibrary: no material_types provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(materialTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	materialTypeInsertCacheMut.RLock()
	cache, cached := materialTypeInsertCache[key]
	materialTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			materialTypeAllColumns,
			materialTypeColumnsWithDefault,
			materialTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(materialTypeType, materialTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(materialTypeType, materialTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"material_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"material_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "tplibrary: unable to insert into material_types")
	}

	if !cached {
		materialTypeInsertCacheMut.Lock()
		materialTypeInsertCache[key] = cache
		materialTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MaterialType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MaterialType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	materialTypeUpdateCacheMut.RLock()
	cache, cached := materialTypeUpdateCache[key]
	materialTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			materialTypeAllColumns,
			materialTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("tplibrary: unable to update material_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"material_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, materialTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(materialTypeType, materialTypeMapping, append(wl, materialTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to update material_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: failed to get rows affected by update for material_types")
	}

	if !cached {
		materialTypeUpdateCacheMut.Lock()
		materialTypeUpdateCache[key] = cache
		materialTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q materialTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to update all for material_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to retrieve rows affected for material_types")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MaterialTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("tplibrary: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), materialTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"material_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, materialTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to update all in materialType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to retrieve rows affected all in update all materialType")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MaterialType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("tplibrary: no material_types provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(materialTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	materialTypeUpsertCacheMut.RLock()
	cache, cached := materialTypeUpsertCache[key]
	materialTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			materialTypeAllColumns,
			materialTypeColumnsWithDefault,
			materialTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			materialTypeAllColumns,
			materialTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("tplibrary: unable to upsert material_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(materialTypePrimaryKeyColumns))
			copy(conflict, materialTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"material_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(materialTypeType, materialTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(materialTypeType, materialTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "tplibrary: unable to upsert material_types")
	}

	if !cached {
		materialTypeUpsertCacheMut.Lock()
		materialTypeUpsertCache[key] = cache
		materialTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MaterialType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MaterialType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("tplibrary: no MaterialType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), materialTypePrimaryKeyMapping)
	sql := "DELETE FROM \"material_types\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to delete from material_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: failed to get rows affected by delete for material_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q materialTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("tplibrary: no materialTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to delete all from material_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: failed to get rows affected by deleteall for material_types")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MaterialTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(materialTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), materialTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"material_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, materialTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: unable to delete all from materialType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "tplibrary: failed to get rows affected by deleteall for material_types")
	}

	if len(materialTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MaterialType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMaterialType(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MaterialTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MaterialTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), materialTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"material_types\".* FROM \"material_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, materialTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "tplibrary: unable to reload all in MaterialTypeSlice")
	}

	*o = slice

	return nil
}

// MaterialTypeExists checks if the MaterialType row exists.
func MaterialTypeExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"material_types\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "tplibrary: unable to check if material_types exists")
	}

	return exists, nil
}
